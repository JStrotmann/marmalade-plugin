/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eMATSDK.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef       void(*MATStartMobileAppTracker_t)(const char* adId, const char* convKey);
typedef       void(*MATCheckForDeferredDeeplink_t)(const char* timeout, s3eCallback function);
typedef       void(*MATMeasureSession_t)();
typedef       void(*MATMeasureAction_t)(const char* eventIdOrName);
typedef       void(*MATMeasureActionWithReferenceId_t)(const char* eventIdOrName, const char* refId);
typedef       void(*MATMeasureActionWithRevenue_t)(const char* eventIdOrName, const char* refId, const char* revenueAmount, const char* currencyCode);
typedef       void(*MATMeasureActionWithItems_t)(const char* eventIdOrName, const MATArray* items, const char* refId, const char* revenueAmount, const char* currencyCode, uint8 transactionState, const char* receipt, const char* receiptSignature);
typedef       void(*MATSetPackageName_t)(const char* packageName);
typedef       void(*MATSetCurrencyCode_t)(const char* currencyCode);
typedef       void(*MATSetUserEmail_t)(const char* userEmail);
typedef       void(*MATSetUserId_t)(const char* userId);
typedef       void(*MATSetUserName_t)(const char* userName);
typedef       void(*MATSetFacebookUserId_t)(const char* userFacebookId);
typedef       void(*MATSetTwitterUserId_t)(const char* userTwitterId);
typedef       void(*MATSetGoogleUserId_t)(const char* userGoogleId);
typedef       void(*MATSetGoogleAdvertisingId_t)(const char* googleId, bool limitAdTracking);
typedef       void(*MATSetSiteId_t)(const char* siteId);
typedef       void(*MATSetTRUSTeId_t)(const char* tpid);
typedef       void(*MATSetAppAdTracking_t)(bool enable);
typedef       void(*MATSetDelegate_t)(bool enable);
typedef       void(*MATSetEventAttribute1_t)(const char* attr);
typedef       void(*MATSetEventAttribute2_t)(const char* attr);
typedef       void(*MATSetEventAttribute3_t)(const char* attr);
typedef       void(*MATSetEventAttribute4_t)(const char* attr);
typedef       void(*MATSetEventAttribute5_t)(const char* attr);
typedef       void(*MATSetEventContentType_t)(const char* contentType);
typedef       void(*MATSetEventContentId_t)(const char* contentId);
typedef       void(*MATSetEventLevel_t)(int level);
typedef       void(*MATSetEventQuantity_t)(int quantity);
typedef       void(*MATSetEventSearchString_t)(const char* searchString);
typedef       void(*MATSetEventRating_t)(const char * rating);
typedef       void(*MATSetEventDate1_t)(const char* date);
typedef       void(*MATSetEventDate2_t)(const char* date);
typedef       void(*MATSetExistingUser_t)(bool isExisting);
typedef       void(*MATSetFacebookEventLogging_t)(bool enable, bool limitUsage);
typedef       void(*MATSetPayingUser_t)(bool isPaying);
typedef       void(*MATSetJailbroken_t)(bool isJailbroken);
typedef       void(*MATSetShouldAutoDetectJailbroken_t)(bool shouldAutoDetect);
typedef       void(*MATSetUseCookieTracking_t)(bool useCookieTracking);
typedef       void(*MATSetAge_t)(int age);
typedef       void(*MATSetGender_t)(int gender);
typedef       void(*MATSetLocation_t)(const char* latitude, const char* longitude);
typedef       void(*MATSetLocationWithAltitude_t)(const char* latitude, const char* longitude, const char* altitude);
typedef       bool(*MATGetIsPayingUser_t)();
typedef const char*(*MATGetMatId_t)();
typedef const char*(*MATGetOpenLogId_t)();
typedef       void(*MATStartAppToAppTracking_t)(const char* targetAppId, const char* advertiserId, const char* offerId, const char* publisherId, bool shouldRedirect);
typedef       void(*MATSetRedirectUrl_t)(const char* redirectUrl);
typedef       void(*MATSetAppleAdvertisingIdentifier_t)(const char* ifa, bool advertisingTrackingEnabled);
typedef       void(*MATSetAppleVendorIdentifier_t)(const char* ifv);
typedef       void(*MATSetShouldAutoGenerateAppleVendorIdentifier_t)(bool shouldAutoGenerate);
typedef       void(*MATSetDebugMode_t)(bool shouldDebug);
typedef       void(*MATSetAllowDuplicates_t)(bool allowDuplicates);

/**
 * struct that gets filled in by s3eMATSDKRegister
 */
typedef struct s3eMATSDKFuncs
{
    MATStartMobileAppTracker_t m_MATStartMobileAppTracker;
    MATCheckForDeferredDeeplink_t m_MATCheckForDeferredDeeplink;
    MATMeasureSession_t m_MATMeasureSession;
    MATMeasureAction_t m_MATMeasureAction;
    MATMeasureActionWithReferenceId_t m_MATMeasureActionWithReferenceId;
    MATMeasureActionWithRevenue_t m_MATMeasureActionWithRevenue;
    MATMeasureActionWithItems_t m_MATMeasureActionWithItems;
    MATSetPackageName_t m_MATSetPackageName;
    MATSetCurrencyCode_t m_MATSetCurrencyCode;
    MATSetUserEmail_t m_MATSetUserEmail;
    MATSetUserId_t m_MATSetUserId;
    MATSetUserName_t m_MATSetUserName;
    MATSetFacebookUserId_t m_MATSetFacebookUserId;
    MATSetTwitterUserId_t m_MATSetTwitterUserId;
    MATSetGoogleUserId_t m_MATSetGoogleUserId;
    MATSetGoogleAdvertisingId_t m_MATSetGoogleAdvertisingId;
    MATSetSiteId_t m_MATSetSiteId;
    MATSetTRUSTeId_t m_MATSetTRUSTeId;
    MATSetAppAdTracking_t m_MATSetAppAdTracking;
    MATSetDelegate_t m_MATSetDelegate;
    MATSetEventAttribute1_t m_MATSetEventAttribute1;
    MATSetEventAttribute2_t m_MATSetEventAttribute2;
    MATSetEventAttribute3_t m_MATSetEventAttribute3;
    MATSetEventAttribute4_t m_MATSetEventAttribute4;
    MATSetEventAttribute5_t m_MATSetEventAttribute5;
    MATSetEventContentType_t m_MATSetEventContentType;
    MATSetEventContentId_t m_MATSetEventContentId;
    MATSetEventLevel_t m_MATSetEventLevel;
    MATSetEventQuantity_t m_MATSetEventQuantity;
    MATSetEventSearchString_t m_MATSetEventSearchString;
    MATSetEventRating_t m_MATSetEventRating;
    MATSetEventDate1_t m_MATSetEventDate1;
    MATSetEventDate2_t m_MATSetEventDate2;
    MATSetExistingUser_t m_MATSetExistingUser;
    MATSetFacebookEventLogging_t m_MATSetFacebookEventLogging;
    MATSetPayingUser_t m_MATSetPayingUser;
    MATSetJailbroken_t m_MATSetJailbroken;
    MATSetShouldAutoDetectJailbroken_t m_MATSetShouldAutoDetectJailbroken;
    MATSetUseCookieTracking_t m_MATSetUseCookieTracking;
    MATSetAge_t m_MATSetAge;
    MATSetGender_t m_MATSetGender;
    MATSetLocation_t m_MATSetLocation;
    MATSetLocationWithAltitude_t m_MATSetLocationWithAltitude;
    MATGetIsPayingUser_t m_MATGetIsPayingUser;
    MATGetMatId_t m_MATGetMatId;
    MATGetOpenLogId_t m_MATGetOpenLogId;
    MATStartAppToAppTracking_t m_MATStartAppToAppTracking;
    MATSetRedirectUrl_t m_MATSetRedirectUrl;
    MATSetAppleAdvertisingIdentifier_t m_MATSetAppleAdvertisingIdentifier;
    MATSetAppleVendorIdentifier_t m_MATSetAppleVendorIdentifier;
    MATSetShouldAutoGenerateAppleVendorIdentifier_t m_MATSetShouldAutoGenerateAppleVendorIdentifier;
    MATSetDebugMode_t m_MATSetDebugMode;
    MATSetAllowDuplicates_t m_MATSetAllowDuplicates;
} s3eMATSDKFuncs;

static s3eMATSDKFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xbb39d6f4, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eMATSDK");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xbb39d6f4, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eMATSDKAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

void MATStartMobileAppTracker(const char* adId, const char* convKey)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[0] func: MATStartMobileAppTracker"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATStartMobileAppTracker(adId, convKey);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATCheckForDeferredDeeplink(const char* timeout, s3eCallback function)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[1] func: MATCheckForDeferredDeeplink"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATCheckForDeferredDeeplink(timeout, function);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATMeasureSession()
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[2] func: MATMeasureSession"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATMeasureSession();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATMeasureAction(const char* eventIdOrName)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[3] func: MATMeasureAction"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATMeasureAction(eventIdOrName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATMeasureActionWithReferenceId(const char* eventIdOrName, const char* refId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[4] func: MATMeasureActionWithReferenceId"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATMeasureActionWithReferenceId(eventIdOrName, refId);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATMeasureActionWithRevenue(const char* eventIdOrName, const char* refId, const char* revenueAmount, const char* currencyCode)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[5] func: MATMeasureActionWithRevenue"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATMeasureActionWithRevenue(eventIdOrName, refId, revenueAmount, currencyCode);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATMeasureActionWithItems(const char* eventIdOrName, const MATArray* items, const char* refId, const char* revenueAmount, const char* currencyCode, uint8 transactionState, const char* receipt, const char* receiptSignature)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[6] func: MATMeasureActionWithItems"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATMeasureActionWithItems(eventIdOrName, items, refId, revenueAmount, currencyCode, transactionState, receipt, receiptSignature);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetPackageName(const char* packageName)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[7] func: MATSetPackageName"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetPackageName(packageName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetCurrencyCode(const char* currencyCode)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[8] func: MATSetCurrencyCode"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetCurrencyCode(currencyCode);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetUserEmail(const char* userEmail)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[9] func: MATSetUserEmail"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetUserEmail(userEmail);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetUserId(const char* userId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[10] func: MATSetUserId"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetUserId(userId);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetUserName(const char* userName)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[11] func: MATSetUserName"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetUserName(userName);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetFacebookUserId(const char* userFacebookId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[12] func: MATSetFacebookUserId"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetFacebookUserId(userFacebookId);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetTwitterUserId(const char* userTwitterId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[13] func: MATSetTwitterUserId"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetTwitterUserId(userTwitterId);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetGoogleUserId(const char* userGoogleId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[14] func: MATSetGoogleUserId"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetGoogleUserId(userGoogleId);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetGoogleAdvertisingId(const char* googleId, bool limitAdTracking)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[15] func: MATSetGoogleAdvertisingId"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetGoogleAdvertisingId(googleId, limitAdTracking);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetSiteId(const char* siteId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[16] func: MATSetSiteId"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetSiteId(siteId);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetTRUSTeId(const char* tpid)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[17] func: MATSetTRUSTeId"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetTRUSTeId(tpid);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetAppAdTracking(bool enable)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[18] func: MATSetAppAdTracking"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetAppAdTracking(enable);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetDelegate(bool enable)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[19] func: MATSetDelegate"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetDelegate(enable);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventAttribute1(const char* attr)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[20] func: MATSetEventAttribute1"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventAttribute1(attr);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventAttribute2(const char* attr)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[21] func: MATSetEventAttribute2"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventAttribute2(attr);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventAttribute3(const char* attr)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[22] func: MATSetEventAttribute3"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventAttribute3(attr);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventAttribute4(const char* attr)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[23] func: MATSetEventAttribute4"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventAttribute4(attr);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventAttribute5(const char* attr)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[24] func: MATSetEventAttribute5"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventAttribute5(attr);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventContentType(const char* contentType)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[25] func: MATSetEventContentType"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventContentType(contentType);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventContentId(const char* contentId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[26] func: MATSetEventContentId"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventContentId(contentId);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventLevel(int level)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[27] func: MATSetEventLevel"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventLevel(level);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventQuantity(int quantity)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[28] func: MATSetEventQuantity"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventQuantity(quantity);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventSearchString(const char* searchString)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[29] func: MATSetEventSearchString"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventSearchString(searchString);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventRating(const char * rating)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[30] func: MATSetEventRating"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventRating(rating);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventDate1(const char* date)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[31] func: MATSetEventDate1"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventDate1(date);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetEventDate2(const char* date)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[32] func: MATSetEventDate2"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetEventDate2(date);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetExistingUser(bool isExisting)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[33] func: MATSetExistingUser"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetExistingUser(isExisting);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetFacebookEventLogging(bool enable, bool limitUsage)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[34] func: MATSetFacebookEventLogging"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetFacebookEventLogging(enable, limitUsage);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetPayingUser(bool isPaying)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[35] func: MATSetPayingUser"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetPayingUser(isPaying);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetJailbroken(bool isJailbroken)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[36] func: MATSetJailbroken"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetJailbroken(isJailbroken);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetShouldAutoDetectJailbroken(bool shouldAutoDetect)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[37] func: MATSetShouldAutoDetectJailbroken"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetShouldAutoDetectJailbroken(shouldAutoDetect);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetUseCookieTracking(bool useCookieTracking)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[38] func: MATSetUseCookieTracking"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetUseCookieTracking(useCookieTracking);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetAge(int age)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[39] func: MATSetAge"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetAge(age);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetGender(int gender)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[40] func: MATSetGender"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetGender(gender);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetLocation(const char* latitude, const char* longitude)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[41] func: MATSetLocation"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetLocation(latitude, longitude);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetLocationWithAltitude(const char* latitude, const char* longitude, const char* altitude)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[42] func: MATSetLocationWithAltitude"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetLocationWithAltitude(latitude, longitude, altitude);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

bool MATGetIsPayingUser()
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[43] func: MATGetIsPayingUser"));

    if (!_extLoad())
        return false;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    bool ret = g_Ext.m_MATGetIsPayingUser();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* MATGetMatId()
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[44] func: MATGetMatId"));

    if (!_extLoad())
        return NULL;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_MATGetMatId();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

const char* MATGetOpenLogId()
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[45] func: MATGetOpenLogId"));

    if (!_extLoad())
        return NULL;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    const char* ret = g_Ext.m_MATGetOpenLogId();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void MATStartAppToAppTracking(const char* targetAppId, const char* advertiserId, const char* offerId, const char* publisherId, bool shouldRedirect)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[46] func: MATStartAppToAppTracking"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATStartAppToAppTracking(targetAppId, advertiserId, offerId, publisherId, shouldRedirect);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetRedirectUrl(const char* redirectUrl)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[47] func: MATSetRedirectUrl"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetRedirectUrl(redirectUrl);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetAppleAdvertisingIdentifier(const char* ifa, bool advertisingTrackingEnabled)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[48] func: MATSetAppleAdvertisingIdentifier"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetAppleAdvertisingIdentifier(ifa, advertisingTrackingEnabled);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetAppleVendorIdentifier(const char* ifv)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[49] func: MATSetAppleVendorIdentifier"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetAppleVendorIdentifier(ifv);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetShouldAutoGenerateAppleVendorIdentifier(bool shouldAutoGenerate)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[50] func: MATSetShouldAutoGenerateAppleVendorIdentifier"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetShouldAutoGenerateAppleVendorIdentifier(shouldAutoGenerate);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetDebugMode(bool shouldDebug)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[51] func: MATSetDebugMode"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetDebugMode(shouldDebug);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void MATSetAllowDuplicates(bool allowDuplicates)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK[52] func: MATSetAllowDuplicates"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_MATSetAllowDuplicates(allowDuplicates);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
