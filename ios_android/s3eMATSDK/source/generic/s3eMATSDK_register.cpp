/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eMATSDK_autodefs.h"
#include "s3eEdk.h"
#include "s3eMATSDK.h"
//Declarations of Init and Term functions
extern s3eResult s3eMATSDKInit();
extern void s3eMATSDKTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void MATStartMobileAppTracker_wrap(const char* adId, const char* convKey)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATStartMobileAppTracker"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATStartMobileAppTracker, 2, adId, convKey);
}

static void MATTrackSession_wrap()
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATTrackSession"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATTrackSession, 0);
}

static void MATTrackSessionWithReferenceId_wrap(const char* refId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATTrackSessionWithReferenceId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATTrackSessionWithReferenceId, 1, refId);
}

static void MATTrackActionForEventIdOrName_wrap(const char* eventIdOrName, const char* refId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATTrackActionForEventIdOrName"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATTrackActionForEventIdOrName, 2, eventIdOrName, refId);
}

static void MATTrackActionForEventIdOrNameItems_wrap(const char* eventIdOrName, const MATArray* items, const char* refId, const char* revenueAmount, const char* currencyCode, uint8 transactionState, const char* receipt, const char* receiptSignature)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATTrackActionForEventIdOrNameItems"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATTrackActionForEventIdOrNameItems, 8, eventIdOrName, items, refId, revenueAmount, currencyCode, transactionState, receipt, receiptSignature);
}

static void MATTrackAction_wrap(const char* eventIdOrName, const char* revenue, const char* currency)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATTrackAction"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATTrackAction, 3, eventIdOrName, revenue, currency);
}

static void MATSetPackageName_wrap(const char* packageName)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetPackageName"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetPackageName, 1, packageName);
}

static void MATSetCurrencyCode_wrap(const char* currencyCode)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetCurrencyCode"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetCurrencyCode, 1, currencyCode);
}

static void MATSetUserEmail_wrap(const char* userEmail)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetUserEmail"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetUserEmail, 1, userEmail);
}

static void MATSetUserId_wrap(const char* userId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetUserId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetUserId, 1, userId);
}

static void MATSetUserName_wrap(const char* userName)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetUserName"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetUserName, 1, userName);
}

static void MATSetFacebookUserId_wrap(const char* userFacebookId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetFacebookUserId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetFacebookUserId, 1, userFacebookId);
}

static void MATSetTwitterUserId_wrap(const char* userTwitterId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetTwitterUserId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetTwitterUserId, 1, userTwitterId);
}

static void MATSetGoogleUserId_wrap(const char* userGoogleId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetGoogleUserId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetGoogleUserId, 1, userGoogleId);
}

static void MATSetGoogleAdvertisingId_wrap(const char* googleId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetGoogleAdvertisingId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetGoogleAdvertisingId, 1, googleId);
}

static void MATSetSiteId_wrap(const char* siteId)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetSiteId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetSiteId, 1, siteId);
}

static void MATSetTRUSTeId_wrap(const char* tpid)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetTRUSTeId"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetTRUSTeId, 1, tpid);
}

static void MATSetAppAdTracking_wrap(bool enable)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetAppAdTracking"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetAppAdTracking, 1, enable);
}

static void MATSetDelegate_wrap(bool enable)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetDelegate"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetDelegate, 1, enable);
}

static void MATSetEventAttribute1_wrap(const char* attr)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetEventAttribute1"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetEventAttribute1, 1, attr);
}

static void MATSetEventAttribute2_wrap(const char* attr)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetEventAttribute2"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetEventAttribute2, 1, attr);
}

static void MATSetEventAttribute3_wrap(const char* attr)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetEventAttribute3"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetEventAttribute3, 1, attr);
}

static void MATSetEventAttribute4_wrap(const char* attr)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetEventAttribute4"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetEventAttribute4, 1, attr);
}

static void MATSetEventAttribute5_wrap(const char* attr)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetEventAttribute5"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetEventAttribute5, 1, attr);
}

static void MATSetExistingUser_wrap(bool isExisting)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetExistingUser"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetExistingUser, 1, isExisting);
}

static void MATSetJailbroken_wrap(bool isJailbroken)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetJailbroken"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetJailbroken, 1, isJailbroken);
}

static void MATSetShouldAutoDetectJailbroken_wrap(bool shouldAutoDetect)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetShouldAutoDetectJailbroken"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetShouldAutoDetectJailbroken, 1, shouldAutoDetect);
}

static void MATSetUseCookieTracking_wrap(bool useCookieTracking)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetUseCookieTracking"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetUseCookieTracking, 1, useCookieTracking);
}

static void MATSetAge_wrap(int age)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetAge"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetAge, 1, age);
}

static void MATSetGender_wrap(int gender)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetGender"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetGender, 1, gender);
}

static void MATSetLocation_wrap(const char* latitude, const char* longitude, const char* altitude)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetLocation"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetLocation, 3, latitude, longitude, altitude);
}

static void MATStartAppToAppTracking_wrap(const char* targetAppId, const char* advertiserId, const char* offerId, const char* publisherId, bool shouldRedirect)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATStartAppToAppTracking"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATStartAppToAppTracking, 5, targetAppId, advertiserId, offerId, publisherId, shouldRedirect);
}

static void MATSetRedirectUrl_wrap(const char* redirectUrl)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetRedirectUrl"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetRedirectUrl, 1, redirectUrl);
}

static void MATSetAppleAdvertisingIdentifier_wrap(const char* ifa, bool advertisingTrackingEnabled)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetAppleAdvertisingIdentifier"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetAppleAdvertisingIdentifier, 2, ifa, advertisingTrackingEnabled);
}

static void MATSetAppleVendorIdentifier_wrap(const char* ifv)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetAppleVendorIdentifier"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetAppleVendorIdentifier, 1, ifv);
}

static void MATSetShouldAutoGenerateAppleVendorIdentifier_wrap(bool shouldAutoGenerate)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetShouldAutoGenerateAppleVendorIdentifier"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetShouldAutoGenerateAppleVendorIdentifier, 1, shouldAutoGenerate);
}

static void MATSetDebugMode_wrap(bool shouldDebug)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetDebugMode"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetDebugMode, 1, shouldDebug);
}

static void MATSetAllowDuplicates_wrap(bool allowDuplicates)
{
    IwTrace(MATSDK_VERBOSE, ("calling s3eMATSDK func on main thread: MATSetAllowDuplicates"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)MATSetAllowDuplicates, 1, allowDuplicates);
}

#define MATStartMobileAppTracker MATStartMobileAppTracker_wrap
#define MATTrackSession MATTrackSession_wrap
#define MATTrackSessionWithReferenceId MATTrackSessionWithReferenceId_wrap
#define MATTrackActionForEventIdOrName MATTrackActionForEventIdOrName_wrap
#define MATTrackActionForEventIdOrNameItems MATTrackActionForEventIdOrNameItems_wrap
#define MATTrackAction MATTrackAction_wrap
#define MATSetPackageName MATSetPackageName_wrap
#define MATSetCurrencyCode MATSetCurrencyCode_wrap
#define MATSetUserEmail MATSetUserEmail_wrap
#define MATSetUserId MATSetUserId_wrap
#define MATSetUserName MATSetUserName_wrap
#define MATSetFacebookUserId MATSetFacebookUserId_wrap
#define MATSetTwitterUserId MATSetTwitterUserId_wrap
#define MATSetGoogleUserId MATSetGoogleUserId_wrap
#define MATSetGoogleAdvertisingId MATSetGoogleAdvertisingId_wrap
#define MATSetSiteId MATSetSiteId_wrap
#define MATSetTRUSTeId MATSetTRUSTeId_wrap
#define MATSetAppAdTracking MATSetAppAdTracking_wrap
#define MATSetDelegate MATSetDelegate_wrap
#define MATSetEventAttribute1 MATSetEventAttribute1_wrap
#define MATSetEventAttribute2 MATSetEventAttribute2_wrap
#define MATSetEventAttribute3 MATSetEventAttribute3_wrap
#define MATSetEventAttribute4 MATSetEventAttribute4_wrap
#define MATSetEventAttribute5 MATSetEventAttribute5_wrap
#define MATSetExistingUser MATSetExistingUser_wrap
#define MATSetJailbroken MATSetJailbroken_wrap
#define MATSetShouldAutoDetectJailbroken MATSetShouldAutoDetectJailbroken_wrap
#define MATSetUseCookieTracking MATSetUseCookieTracking_wrap
#define MATSetAge MATSetAge_wrap
#define MATSetGender MATSetGender_wrap
#define MATSetLocation MATSetLocation_wrap
#define MATStartAppToAppTracking MATStartAppToAppTracking_wrap
#define MATSetRedirectUrl MATSetRedirectUrl_wrap
#define MATSetAppleAdvertisingIdentifier MATSetAppleAdvertisingIdentifier_wrap
#define MATSetAppleVendorIdentifier MATSetAppleVendorIdentifier_wrap
#define MATSetShouldAutoGenerateAppleVendorIdentifier MATSetShouldAutoGenerateAppleVendorIdentifier_wrap
#define MATSetDebugMode MATSetDebugMode_wrap
#define MATSetAllowDuplicates MATSetAllowDuplicates_wrap

#endif

void s3eMATSDKRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[38];
    funcPtrs[0] = (void*)MATStartMobileAppTracker;
    funcPtrs[1] = (void*)MATTrackSession;
    funcPtrs[2] = (void*)MATTrackSessionWithReferenceId;
    funcPtrs[3] = (void*)MATTrackActionForEventIdOrName;
    funcPtrs[4] = (void*)MATTrackActionForEventIdOrNameItems;
    funcPtrs[5] = (void*)MATTrackAction;
    funcPtrs[6] = (void*)MATSetPackageName;
    funcPtrs[7] = (void*)MATSetCurrencyCode;
    funcPtrs[8] = (void*)MATSetUserEmail;
    funcPtrs[9] = (void*)MATSetUserId;
    funcPtrs[10] = (void*)MATSetUserName;
    funcPtrs[11] = (void*)MATSetFacebookUserId;
    funcPtrs[12] = (void*)MATSetTwitterUserId;
    funcPtrs[13] = (void*)MATSetGoogleUserId;
    funcPtrs[14] = (void*)MATSetGoogleAdvertisingId;
    funcPtrs[15] = (void*)MATSetSiteId;
    funcPtrs[16] = (void*)MATSetTRUSTeId;
    funcPtrs[17] = (void*)MATSetAppAdTracking;
    funcPtrs[18] = (void*)MATSetDelegate;
    funcPtrs[19] = (void*)MATSetEventAttribute1;
    funcPtrs[20] = (void*)MATSetEventAttribute2;
    funcPtrs[21] = (void*)MATSetEventAttribute3;
    funcPtrs[22] = (void*)MATSetEventAttribute4;
    funcPtrs[23] = (void*)MATSetEventAttribute5;
    funcPtrs[24] = (void*)MATSetExistingUser;
    funcPtrs[25] = (void*)MATSetJailbroken;
    funcPtrs[26] = (void*)MATSetShouldAutoDetectJailbroken;
    funcPtrs[27] = (void*)MATSetUseCookieTracking;
    funcPtrs[28] = (void*)MATSetAge;
    funcPtrs[29] = (void*)MATSetGender;
    funcPtrs[30] = (void*)MATSetLocation;
    funcPtrs[31] = (void*)MATStartAppToAppTracking;
    funcPtrs[32] = (void*)MATSetRedirectUrl;
    funcPtrs[33] = (void*)MATSetAppleAdvertisingIdentifier;
    funcPtrs[34] = (void*)MATSetAppleVendorIdentifier;
    funcPtrs[35] = (void*)MATSetShouldAutoGenerateAppleVendorIdentifier;
    funcPtrs[36] = (void*)MATSetDebugMode;
    funcPtrs[37] = (void*)MATSetAllowDuplicates;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[38] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eMATSDK", funcPtrs, sizeof(funcPtrs), flags, s3eMATSDKInit, s3eMATSDKTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eMATSDKStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eMATSDKRegisterExt;
    return 0;
}

int g_s3eMATSDKVal = s3eMATSDKStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eMATSDKRegisterExt();
}
#endif

#endif
